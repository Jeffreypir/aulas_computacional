n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
result <- rf(n = 1000L, c = 6)
result$rejeicao/(5e3L+result$rejeicao)
1/6
1-1/6
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 1000L
result <- rf(n = n, c = 6)
result
set.seed(0)
n <- 1000L
result <- rf(n = n, c = 6)
result$rejeicao/(n+result$rejeicao)
1 - 1/6
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 1e4
result <- rf(n = n, c = 6)
result$rejeicao/(n+result$rejeicao)
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 2e4
result <- rf(n = n, c = 6)
result$rejeicao/(n+result$rejeicao)
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 2e4
result <- rf(n = n, c = 1.5)
result$rejeicao/(n+result$rejeicao)
1 - 1/1.5
hist(result$valores)
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 2e4
result <- rf(n = n, c = 6)
result$rejeicao/(n+result$rejeicao)
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 2e4
result <- rf(n = n, c = 6)
result$rejeicao/(n+result$rejeicao)
hist(result$valores)
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 2e4
result <- rf(n = n, c = 0.4)
result$rejeicao/(n+result$rejeicao)
hist(result$valores)
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 2e4
result <- rf(n = n, c = 1.5)
result$rejeicao/(n+result$rejeicao)
hist(result$valores)
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 2e4
result <- rf(n = n, c = 6)
result$rejeicao/(n+result$rejeicao)
hist(result$valores)
result$rejeicao
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 2e4
result <- rf(n = n, c = 1.5)
result$rejeicao/(n+result$rejeicao)
hist(result$valores)
result$rejeicao
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 2e4
result <- rf(n = n, c = 6)
result$rejeicao/(n+result$rejeicao)
hist(result$valores)
result$rejeicao
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 2e4
result <- rf(n = n, c = 6)
result$rejeicao
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 2e4
result <- rf(n = n, c = 1.5)
result$rejeicao
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 2e4
result <- rf(n = n, c = 1.5)
# Probabilidade de aceitar:
1 - result$rejeicao/(n + result$rejeicao)
1/1.5
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 2e4
c <- 1.5
result <- rf(n = n, c = c)
# Probabilidade de aceitar:
1/c
# Aproximacao da probabilidade de aceitar:
1 - result$rejeicao/(n + result$rejeicao)
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 2e4
c <- 6
result <- rf(n = n, c = c)
# Probabilidade de aceitar:
1/c
# Aproximacao da probabilidade de aceitar:
1 - result$rejeicao/(n + result$rejeicao)
rf <- function(n = 1L, c = 6){
f <- function(x) 6 * x * (1 - x)
i <- 1L
n_rejeicao <- 0L
vetor <- numeric(n)
while (i < n){
u <- runif(n = 1L, min = 0, max = 1)
y <- runif(n = 1L, min = 0, max = 1)
if (u <= f(y)/c){
vetor[i] <- y
i <- i + 1L
}
else{
n_rejeicao <- n_rejeicao + 1L
}
}
list(valores = vetor, rejeicao = n_rejeicao)
}
set.seed(0)
n <- 2e4
c <- 20
result <- rf(n = n, c = c)
# Probabilidade de aceitar:
1/c
# Aproximacao da probabilidade de aceitar:
1 - result$rejeicao/(n + result$rejeicao)
runif(1, 0, 1)
as.integer(runif(1, 0, 1))
as.integer(runif(1, 0, 1))
as.integer(runif(1, 0, 1)) + 1
as.integer(runif(1, 0, 1)) + 1
as.integer(runif(1, 0, 1)) + 1
as.integer(10*runif(1, 0, 1)) + 1
as.integer(10*runif(1, 0, 1)) + 1
as.integer(10*runif(1, 0, 1)) + 1
as.integer(10*runif(1, 0, 1)) + 1
as.integer(10*runif(1, 0, 1)) + 1]
as.integer(10*runif(1, 0, 1)) + 1]
as.integer(10*runif(1, 0, 1)) + 1
as.integer(10*runif(1, 0, 1)) + 1
as.integer(10*runif(1, 0, 1)) + 1
as.integer(10*runif(1, 0, 1)) + 1
as.integer(10*runif(1, 0, 1)) + 1
as.integer(10*runif(1, 0, 1)) + 1
as.integer(10*runif(1, 0, 1)) + 1
as.integer(10*runif(1, 0, 1)) + 1
as.integer(10*runif(1, 0, 1)) + 1
as.integer(10*runif(1, 0, 1)) + 1
as.integer(10*runif(1, 0, 1)) + 1
as.integer(10*runif(1, -10, 10)) + 1
as.integer(10*runif(1, -10, 10)) + 1
as.integer(runif(1, -10, 10))
as.integer(runif(1, -10, 10))
as.integer(runif(1, -10, 10))
as.integer(runif(1, -10, 10))
as.integer(runif(1, -10, 10))
as.integer(runif(1, -10, 10))
hist(as.integer(runif(1000, -10, 10)) )
hist(as.integer(runif(10000, -10, 10)) )
hist(as.integer(runif(100000, -10, 10)) )
hist(as.integer(runif(100000, -10, 10))) + 1
hist(as.integer(runif(1000, -10, 10)) + 1)
hist(as.integer(runif(10000, -10, 10)) + 1)
runif(1)
10*runif(1)
10*runif(1)
10*runif(1) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1, -1, 1)) + 1
as.integer(10*runif(1, -1, 1)) + 1
as.integer(10*runif(1, -1, 1)) + 1
as.integer(10*runif(1, -1, 1)) + 1
as.integer(10*runif(1, -1, 1)) + 1
as.integer(10*runif(1, -1, 1)) + 1
as.integer(10*runif(1, -1, 1)) + 1
as.integer(10*runif(1, -1, 1)) + 1
as.integer(10*runif(1, -1, 1)) + 1
as.integer(10*runif(1, -1, 1)) + 1
as.integer(10*runif(1, -1, 1)) + 1
as.integer(10*runif(1, -1, 1)) + 1
as.integer(10*runif(1, -1, 1)) + 1
as.integer(10*runif(1, -1, 1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
as.integer(10*runif(1)) + 1
-0.9*10
-0.9*10 + 1
