}
}
f1(1)
x <- 10
f <- function(x) {
function() {
x + 1
}
}
f(1)
y <- 10
f <- function(x) {
function() {
x + y
}
}
g <- f(1)
g(x = 2)
y <- 10
f <- function(x) {
function() {
x + y
}
}
g <- f(1)
g()
rm(list=ls())
y <- 10
f <- function(x) {
function() {
x + y
}
}
g <- f(1)
g
g
f <- function(y) {
function(x) {
x + y
}
}
f()
f(1)
y <- 10
f <- function(y) {
function(x) {
x + y
}
}
g <- f(1)
g(x = 2)
x <- 1:10
attr(x,"dim") <- c(2, 5
)
x
x
x <- 1:10
x
x <- 1:10
attr(x,"test") <- c(2, 5)
x
y <- 1:10
attr(y, "my_attribute") <- "This is a vector"
attr(y, "my_attribute")
y
y <- 1:10
attr(y, "my_attribute") <- "This is a vector"
attr(y, "my_attribute")
attr()
y
attr(y, "my_attribute") <- NULL
y
c <- 10
c(c = c)
21 * 2
f <- function(x){
f <- function(x){
f <- function(x){
x * 3
}
f(x) * 2
}
f(x) + 1
}
f(7)
f <- function(x){
g <- function(y){
y <<- 2
rep(x = y, times = x)
}
g(3)
}
f(3)
f <- function(x){
g <- function(y){
y <<- 2
rep(x = y, times = x)
}
list(g(3), y)
}
f(3)
f <- function(x){
g <- function(y){
y <<- 2
rep(x = y, times = x)
}
list(list(g(3), y), list(g(3), y))
}
f(3)
f <- function(x){
y <- 0
g <- function(y){
y <<- y + 1
rep(x = y, times = x)
}
list(list(g(3), y), list(g(3), y))
}
f(3)
f <- function(x){
y <- 0
g <- function(y){
y <<- y + 1
rep(x = y, times = x)
}
list(list(g(3), y), list(g(3), y))
}
f()
f(1)
x <- 0
f <- function(){
x <<- x + 1
}
f()
x <- 0
f <- function(){
x <<- x + 1
x
}
x
f()
f()
x
f <- function(x){
y <- 0
x <- 0
g <- function(){
y <<- y + 1
rep(x = y, times = x)
}
list(list(g(3), y), list(g(3), y))
}
f
f(1)
f(2)
f <- function(x){
y <- 0
x <- 0
g <- function(){
y <<- y + 1
rep(x = y, times = y)
}
list(list(g(), y), list(g(), y))
}
f()
f(1)
f(3)
f(3)
f(3)
f(5)
rep(x = y, times = y)
f <- function(x){
y <- 0
x <- 0
g <- function(){
y <<- y + 1
}
rep(x = y, times = y)
}
f(1)
f <- function(){
g <- function(){
y <<- y + 1
}
rep(x = y, times = y)
}
f()
f()
f()
f <- function(){
g <- function(){
y <<- y + 1
}
list(rep(x = y, times = y), rep(x = y, times = y))
}
f()
f <- function(){
g <- function(){
y <<- y + 1
}
list(rep(x = g(), times = y), rep(x = g(), times = y))
}
f()
f <- function(){
g <- function(){
y <<- y + 1
}
list(rep(x = g(), times = y), rep(x = g(), times = y), rep(x = g(), times = y))
}
f()
rm(list=ls(all=TRUE))
f <- function(){
g <- function(){
y <<- y + 1
}
list(rep(x = g(), times = y), rep(x = g(), times = y), rep(x = g(), times = y))
}
f()
f <- function(){
y <- 0
g <- function(){
y <<- y + 1
}
list(rep(x = g(), times = y), rep(x = g(), times = y), rep(x = g(), times = y))
}
f()
f <- function() {
x <- 0
x <<- x + 1
x
}
f()
f <- function() {
x <- 0
x <<- x + 1
x
}
f(); x
x <- 1
f <- function() {
x <- 0
x <<- x + 1
x
}
f(); x
2 -> x
x
x <- 0
f <- function(){
x = 7
x + 1 ->> x # Operador de atribuição profunda.
x
}
f()
f()
f()
x <- 0
f <- function(){
x = 7
x <<- x + 1 # Operador de atribuição profunda.
x
}
f()
f()
rm(list=ls(all=TRUE))
x <- 0
f <- function(){
x = 7
x <<- x + 1 # Operador de atribuição profunda.
x
}
f()
f90
f()
f()
f()
f()
x <- 0
f <- function(){
# x encontra-se definido no escopo externo na primeira chamada à
# função f.
x <<- x + 1 # Operador de atribuição profunda.
x
}
f()
f()
f()
f()
x <- 0
f <- function(){
# x encontra-se definido no escopo externo na primeira chamada à
# função f.
x <<- x + 1 # Operador de atribuição profunda.
x
}
f()
f()
f()
f()
x <- 0
f <- function(){
# x encontra-se definido no escopo externo na primeira chamada à
# função f.
x + 1 ->> x # Operador de atribuição profunda.
x
}
f()
f()
f()
f()
x <- 0
f <- function(){
# x encontra-se definido no escopo externo na primeira chamada à
# função f.
x + 1 ->> x # Operador de atribuição profunda.
x
}
f()
x <- 0
f <- function(){
# x encontra-se definido no escopo externo na primeira chamada à
# função f.
x + 1 ->> x # Operador de atribuição profunda.
x
}
f()
x <- 0
f <- function(){
# x encontra-se definido no escopo externo na primeira chamada à
# função f.
x + 1 ->> x # Operador de atribuição profunda.
x
}
f()
x <- 0
f <- function(){
# x encontra-se definido no escopo externo na primeira chamada à
# função f.
x + 1 ->> x # Operador de atribuição profunda.
x
}
f()
rm(list=ls())
x <- 0
f <- function(){
# x encontra-se definido no escopo externo na primeira chamada à
# função f.
x + 1 ->> x # Operador de atribuição profunda.
x
}
f()
f()
f()
2 -> x
f <- function(){
x * 2 ->> x
x
}
f()
x
rm(list=ls())
2 -> x
f <- function(){
x * 2 ->> x
x
}
f()
x
rm(list=ls())
2 -> x
f <- function(){
x * 2 <<- x
x
}
f()
x <- 2
f <- function(){
x * 2 <<- x
x
}
f()
x <- 2
f <- function(){
x <<- x * 2
x
}
f()
x
x <- 2
f <- function(){
x <<- x * 2
x
}
f()
x <- 2
f <- function(){
x <- 2
x <<- x * 2
x
}
f()
x
f <- function(){
2 ->
x * 2 ->> x
x
}
f()
f <- function(){
2 -> x
x * 2 ->> x
x
}
f()
x
`%+%` <- function(x, sep = " ", y){
paste0(x, y)
}
"Estatística" %+% "Computacional"
`%+%` <- function(x, sep = " ", y){
paste(x, y, sep = sep)
}
"Estatística" %+% "Computacional"
`%+%` <- function(x, y, sep = " "){
paste(x, y, sep = sep)
}
"Estatística" %+% "Computacional"
??assings
apropos("assings")
apropos("assing")
apropos("assin")
apropos("assi")
?assignOps
"pedro" %in% "pedro"
"pedro" %in% "pedro rafael"
grep("pedro", "Pedro Rafael")
grep("pedro", "Pedro Rafael", ignore.case = FALSE)
grep("pedro", "Pedro Rafael", ignore.case = TRUE)
?grep
gsub("pedro", "Pedro Rafael", ignore.case = TRUE)
gsub("pedro", "Pedro Rafael")
getwd()
set.seed(0)
rnorm(1000L) %>% hist(., main = "Histograma Qualquer", xlab = "x",
ylab = "Frequência")
library(magrittr)
set.seed(0)
rnorm(1000L) %>% hist(., main = "Histograma Qualquer", xlab = "x",
ylab = "Frequência")
set.seed(0)
rnorm(1000L) %T>% hist(., main = "Histograma Qualquer", xlab = "x",
ylab = "Frequência")
set.seed(0)
rnorm(1000L) %T>% hist(., main = "Histograma Qualquer", xlab = "x",
ylab = "Frequência")
set.seed(0)
rnorm(1000L) %>% hist(., main = "Histograma Qualquer", xlab = "x",
ylab = "Frequência")
`+`(1,2)
^(2,3)
`^`(2,3)
2^3
2 + 3
minhafunc(1,2,3,2,43,2,4,2,43)
1 + 1+ 1+
1 + 1 +1
`+`(1,2)
x <- 1
View(mtcars)
mtcars$disp %>% as.integer()
View(mtcars)
mtcars$disp %>% as.integer()
mtcars$disp %<>% as.integer()
View(mtcars)
var(rnorm(100))
sessionInfo()
f <- function() cat("oi")
environment(f)
gfdgd
sgdfs
gfds
gds
gds
gd
sg
dsg
# Vetor com valores inteiros em memória de 1 à 10.
x <- 1L:10L
# Introduzindo dois argumentos ao objeto x.
# Primeiro argumento: desc, que apresenta uma pequena descrição do objeto x.
# Segundo argumento: M, uma matriz qualquer que poderia vir a ser útil guardar.
attr(x = x, which = "desc") <- "vetor com valores inteiros"
attr(x = x, which = "M") <- matrix(data = c(1, 7, 3, 8), ncol = 2, nrow = 2)
x
x + 1
mean(x)
attributes(x)
attributes(x)$M
x
det(attributes(x)$M)
x
f <- function(x){
x ^ 2
}
integrate(f, lower = 0, upper = 2)$value
f <- function(x){
x ^ 2
}
integrate(function(x) x ^ 2, lower = 0, upper = 2)$value
function(x) x ^ 2 %>% integrate(lower = 0, upper = 2)$value
(function(x) x ^ 2) %>% integrate(lower = 0, upper = 2)$value
(function(x) x ^ 2) %>% integrate(lower = 0, upper = 2)%$%value
(function(x) x ^ 2) %>% integrate(lower = 0, upper = 2)%$%value
