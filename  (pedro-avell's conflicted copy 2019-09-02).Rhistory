bodyfat=c(12.3,6.1,25.3,10.4,28.7,20.9,19.2,12.4,4.1,11.7,7.1,7.8,20.8,21.2,22.1,20.9,29,22.9,16,16.5,19.1,15.2,15.6,17.7,14,3.7,7.9,22.9,3.7,8.8,11.9,5.7,11.8,21.3,32.3,40.1,24.2,28.4,35.2,32.6,34.5,32.9,31.6,32,7.7,13.9,10.8,5.6,13.6,4,10.2,6.6,8,6.3,3.9,22.6,20.4,28,31.5,24.6,26.1,29.8,30.7,25.8,32.3,30,21.5,13.8,6.3,12.9,24.3,8.8,8.5,13.5,11.8,18.5,8.8,22.2,21.5,18.8,31.4,26.8,18.4,27,27,26.6,14.9,23.1,8.3,14.1,20.5,18.2,8.5,24.9,9,17.4,9.6,11.3,17.8,22.2,21.2,20.4,20.1,22.3,25.4,18,19.3,18.3,17.3,21.4,19.7,28,22.1,21.3,26.7,16.7,20.1,13.9,25.8,18.1,27.9,25.3,14.7,16,13.8,17.5,27.2,17.4,20.8,14.9,18.1,22.7,23.6,26.1,24.4,27.1,21.8,29.4,22.3,20.4,24.9,18.3,23.3,9.4,10.3,14.2,19.2,29.6,5.3,25.2,9.4,19.6,10.1,16.5,21,17.3,31.2,10,12.5,22.5,9.4,14.6,13,15.1,27.3,19.2,21.8,20.3,36.3,16.5,3,20.5,16.9,25.3,9.9,13.1,29.9,22.5,16.9,26.6,11.5,12.1,17.5,8.6,23.6,20.4,20.5,24.4,11.4,38.1,15.9,24.7,22.8,25.5,22,17.7,6.6,23.6,12.2,22.1,28.7,6,34.8,16.6,32.9,32.8,9.6,10.8,7.1,27.2,19.5,18.7,19.5,47.5,13.6,7.5,24.5,15,12.4,26,11.5,5.2,10.9,12.5,14.8,25.2,14.9,17,10.6,16.1,15.4,26.7,25.8,18.6,24.8,27.3,12.4,29.9,17,3,30.4,32.6,29,15.2,30.2,11,33.6,29.3,26,31.9)
# PAL extended Weibull  - Probability density function.
pdf_PALEW <- function(par, x) {
a = par[1]
b = par[2]
v = par[3]
p = par[4]
(1 / log(p)) * (p - 1)*(v * b / a)*(x / a) ^ b - 1 * exp (- (x / a)) ^ b /
((1 - (1 - p * v) * exp (- (x / a) ^ b)) * (1 - (1 - v) * exp (- (x / a) ^b))) }
# PAL extended Weibull  - Cumulative distribution function.
cdf_PALEW <- function(par, x) {
a = par[1]
b = par[2]
v = par[3]
p = par[4]
1 - (1 / log(p)) * log((1 - (1 - p * v) * (exp (- (x / a) ^ b))) / (1 -(1 - v) * exp (- (x / a) ^ b)))
}
#goodness of fit
set.seed(0)
goodness_of_fit= goodness.fit(pdf = pdf_PALEW ,
cdf = cdf_PALEW ,
starts = c(4, 4, 4, 4),
data = bodyfat,
method = "PSO",
domain = c(0, Inf),
mle = NULL,
lim_inf = c(0, 0, 0, 1),
lim_sup = c(10,10,10,10),
S=550,
N=500)
x = seq(0,ceiling(max(bodyfat)), length.out = 500)
hist(bodyfat, probability = TRUE, )
lines(x, pdf_PALEW(par = result_2$par, x), col = "blue")
library(AdequacyModel)
bodyfat=c(12.3,6.1,25.3,10.4,28.7,20.9,19.2,12.4,4.1,11.7,7.1,7.8,20.8,21.2,22.1,20.9,29,22.9,16,16.5,19.1,15.2,15.6,17.7,14,3.7,7.9,22.9,3.7,8.8,11.9,5.7,11.8,21.3,32.3,40.1,24.2,28.4,35.2,32.6,34.5,32.9,31.6,32,7.7,13.9,10.8,5.6,13.6,4,10.2,6.6,8,6.3,3.9,22.6,20.4,28,31.5,24.6,26.1,29.8,30.7,25.8,32.3,30,21.5,13.8,6.3,12.9,24.3,8.8,8.5,13.5,11.8,18.5,8.8,22.2,21.5,18.8,31.4,26.8,18.4,27,27,26.6,14.9,23.1,8.3,14.1,20.5,18.2,8.5,24.9,9,17.4,9.6,11.3,17.8,22.2,21.2,20.4,20.1,22.3,25.4,18,19.3,18.3,17.3,21.4,19.7,28,22.1,21.3,26.7,16.7,20.1,13.9,25.8,18.1,27.9,25.3,14.7,16,13.8,17.5,27.2,17.4,20.8,14.9,18.1,22.7,23.6,26.1,24.4,27.1,21.8,29.4,22.3,20.4,24.9,18.3,23.3,9.4,10.3,14.2,19.2,29.6,5.3,25.2,9.4,19.6,10.1,16.5,21,17.3,31.2,10,12.5,22.5,9.4,14.6,13,15.1,27.3,19.2,21.8,20.3,36.3,16.5,3,20.5,16.9,25.3,9.9,13.1,29.9,22.5,16.9,26.6,11.5,12.1,17.5,8.6,23.6,20.4,20.5,24.4,11.4,38.1,15.9,24.7,22.8,25.5,22,17.7,6.6,23.6,12.2,22.1,28.7,6,34.8,16.6,32.9,32.8,9.6,10.8,7.1,27.2,19.5,18.7,19.5,47.5,13.6,7.5,24.5,15,12.4,26,11.5,5.2,10.9,12.5,14.8,25.2,14.9,17,10.6,16.1,15.4,26.7,25.8,18.6,24.8,27.3,12.4,29.9,17,3,30.4,32.6,29,15.2,30.2,11,33.6,29.3,26,31.9)
# PAL extended Weibull  - Probability density function.
pdf_PALEW <- function(par, x) {
a = par[1]
b = par[2]
v = par[3]
p = par[4]
(1 / log(p)) * (p - 1)*(v * b / a)*(x / a) ^ b - 1 * exp (- (x / a)) ^ b /
((1 - (1 - p * v) * exp (- (x / a) ^ b)) * (1 - (1 - v) * exp (- (x / a) ^b))) }
# PAL extended Weibull  - Cumulative distribution function.
cdf_PALEW <- function(par, x) {
a = par[1]
b = par[2]
v = par[3]
p = par[4]
1 - (1 / log(p)) * log((1 - (1 - p * v) * (exp (- (x / a) ^ b))) / (1 -(1 - v) * exp (- (x / a) ^ b)))
}
#goodness of fit
set.seed(0)
goodness_of_fit= goodness.fit(pdf = pdf_PALEW ,
cdf = cdf_PALEW ,
starts = c(4, 4, 4, 4),
data = bodyfat,
method = "PSO",
domain = c(0, Inf),
mle = NULL,
lim_inf = c(0, 0, 0, 1),
lim_sup = c(10,10,10,10),
S=550,
N=500)
x = seq(0,ceiling(max(bodyfat)), length.out = 500)
hist(bodyfat, probability = TRUE, )
lines(x, pdf_PALEW(par = result_2$par, x), col = "blue")
library(AdequacyModel)
bodyfat=c(12.3,6.1,25.3,10.4,28.7,20.9,19.2,12.4,4.1,11.7,7.1,7.8,20.8,21.2,22.1,20.9,29,22.9,16,16.5,19.1,15.2,15.6,17.7,14,3.7,7.9,22.9,3.7,8.8,11.9,5.7,11.8,21.3,32.3,40.1,24.2,28.4,35.2,32.6,34.5,32.9,31.6,32,7.7,13.9,10.8,5.6,13.6,4,10.2,6.6,8,6.3,3.9,22.6,20.4,28,31.5,24.6,26.1,29.8,30.7,25.8,32.3,30,21.5,13.8,6.3,12.9,24.3,8.8,8.5,13.5,11.8,18.5,8.8,22.2,21.5,18.8,31.4,26.8,18.4,27,27,26.6,14.9,23.1,8.3,14.1,20.5,18.2,8.5,24.9,9,17.4,9.6,11.3,17.8,22.2,21.2,20.4,20.1,22.3,25.4,18,19.3,18.3,17.3,21.4,19.7,28,22.1,21.3,26.7,16.7,20.1,13.9,25.8,18.1,27.9,25.3,14.7,16,13.8,17.5,27.2,17.4,20.8,14.9,18.1,22.7,23.6,26.1,24.4,27.1,21.8,29.4,22.3,20.4,24.9,18.3,23.3,9.4,10.3,14.2,19.2,29.6,5.3,25.2,9.4,19.6,10.1,16.5,21,17.3,31.2,10,12.5,22.5,9.4,14.6,13,15.1,27.3,19.2,21.8,20.3,36.3,16.5,3,20.5,16.9,25.3,9.9,13.1,29.9,22.5,16.9,26.6,11.5,12.1,17.5,8.6,23.6,20.4,20.5,24.4,11.4,38.1,15.9,24.7,22.8,25.5,22,17.7,6.6,23.6,12.2,22.1,28.7,6,34.8,16.6,32.9,32.8,9.6,10.8,7.1,27.2,19.5,18.7,19.5,47.5,13.6,7.5,24.5,15,12.4,26,11.5,5.2,10.9,12.5,14.8,25.2,14.9,17,10.6,16.1,15.4,26.7,25.8,18.6,24.8,27.3,12.4,29.9,17,3,30.4,32.6,29,15.2,30.2,11,33.6,29.3,26,31.9)
# PAL extended Weibull  - Probability density function.
pdf_PALEW <- function(par, x) {
a = par[1]
b = par[2]
v = par[3]
p = par[4]
(1 / log(p)) * (p - 1)*(v * b / a)*(x / a) ^ b - 1 * exp (- (x / a)) ^ b /
((1 - (1 - p * v) * exp (- (x / a) ^ b)) * (1 - (1 - v) * exp (- (x / a) ^b))) }
# PAL extended Weibull  - Cumulative distribution function.
cdf_PALEW <- function(par, x) {
a = par[1]
b = par[2]
v = par[3]
p = par[4]
1 - (1 / log(p)) * log((1 - (1 - p * v) * (exp (- (x / a) ^ b))) / (1 -(1 - v) * exp (- (x / a) ^ b)))
}
#goodness of fit
set.seed(0)
goodness_of_fit= goodness.fit(pdf = pdf_PALEW ,
cdf = cdf_PALEW ,
starts = c(4, 4, 4, 4),
data = bodyfat,
method = "BFGS")
x = seq(0,ceiling(max(bodyfat)), length.out = 500)
hist(bodyfat, probability = TRUE, )
lines(x, pdf_PALEW(par = result_2$par, x), col = "blue")
set.seed(0)
goodness_of_fit= goodness.fit(pdf = pdf_PALEW ,
cdf = cdf_PALEW ,
starts = c(4, 4, 4, 4),
data = bodyfat,
method = "BFGS")
integrate(f = pdf_PALEW, lower = 0, upper = 100L)
integrate(f = pdf_PALEW, lower = 0, upper = 100L, par = c(1.2, 2.1, 0.2, 3.2))
integrate(f = pdf_PALEW, lower = 0, upper = 100L, par = c(1.2, 2.1, 0.2, 0.2))
integrate(f = pdf_PALEW, lower = 0, upper = 100L, par = c(1.3, 1.4, 1.5, 1.7))
integrate(f = pdf_PALEW, lower = 0, upper = 1e4L, par = c(1.3, 1.4, 1.5, 1.7))
setwd("~/Dropbox/UFPB/aulas_ufpb/2019.1/aulas_computacional")
library(dplyr)
starwars
class(starwars)
is.tbl(starwars)
View(starwars)
starwars %>% filter(species == "Droid")
starwars %>% filter(species == "Droid" | "Human")
starwars %>% filter(species == "Droid" | species == "Human")
starwars %>% filter(species == "Human")
starwars %>% filter(species == "Human")
starwars %>%
select(name, ends_with("color"))
starwars %>%
mutate(name, bmi = mass / ((height / 100)  ^ 2))
starwars %>%
mutate(name, bmi = mass / ((height / 100)  ^ 2)) %>%
select(name:mass, bmi)
starwars %>% select(name:mass)
starwars %>% select(name:mass) %>% filter(mass > 32)
starwars %>% select(name:mass) %>% filter(12 < mass < 32)
starwars %>% select(name:mass) %>% filter(mass > 32 & mass < 50)
?mutate
starwars %>% mutate(test = mass * 2)
starwars %>%
mutate(name, bmi = mass / ((height / 100)  ^ 2))
starwars
starwars %>%
mutate(name, bmi = mass / ((height / 100)  ^ 2))]
starwars %>%
mutate(name, bmi = mass / ((height / 100)  ^ 2))
starwars %>% arrange(quantile(mass))
starwars %>% arrange(quantile(mass, na.rm = TRUE))
starwars %>% arrange(desc(mass))
starwars %>% arrange(sort(desc(mass)))
starwars %>% arrange(sort(mass))
starwars %>% arrange
starwars %>% arrange(mass)
starwars %>% arrange(mass)
starwars %>% arrange(mass & height)
starwars %>% arrange(mass,height)
ar <- function(n = 1L, x, prob){
c <- 1.4
random_y <- function(i){
while (TRUE) {
y <- floor(length(x) * runif(n = 1L, min = 0, max = 1)) + 1L
if (runif(n = 1L, 0, 1) < length(prob) * prob[y] / c) return(y)
}
}
unlist(lapply(X = 1L:n, FUN = random_y))
}
set.seed(1L)
result <- ar(n = 1e4L, x = 1L:4L, prob = c(0.30, 0.20, 0.35, 0.15))
# Probabilidades aproximadas.
barplot(table(result)/1e4L, ylim = c(0, 0.4))
grid()
result
4*0.35
ar <- function(n = 1L, x, prob){
c <- max(prob) *length(x)
random_y <- function(i){
while (TRUE) {
y <- floor(length(x) * runif(n = 1L, min = 0, max = 1)) + 1L
if (runif(n = 1L, 0, 1) < length(prob) * prob[y] / c) return(y)
}
}
unlist(lapply(X = 1L:n, FUN = random_y))
}
set.seed(1L)
result <- ar(n = 1000, x = 1L:4L, prob = c(0.30, 0.20, 0.35, 0.15))
# Probabilidades aproximadas.
barplot(table(result)/1e4L, ylim = c(0, 0.4))
grid()
ar <- function(n = 1L, x, prob){
c <- max(prob) * 4
random_y <- function(i){
while (TRUE) {
y <- floor(length(x) * runif(n = 1L, min = 0, max = 1)) + 1L
if (runif(n = 1L, 0, 1) < length(prob) * prob[y] / c) return(y)
}
}
unlist(lapply(X = 1L:n, FUN = random_y))
}
set.seed(1L)
result <- ar(n = 1000, x = 1L:4L, prob = c(0.30, 0.20, 0.35, 0.15))
# Probabilidades aproximadas.
barplot(table(result)/1e4L, ylim = c(0, 0.4))
grid()
ar <- function(n = 1L, x, prob){
c <- 1/4
random_y <- function(i){
while (TRUE) {
y <- floor(length(x) * runif(n = 1L, min = 0, max = 1)) + 1L
if (runif(n = 1L, 0, 1) < length(prob) * prob[y] / c) return(y)
}
}
unlist(lapply(X = 1L:n, FUN = random_y))
}
set.seed(1L)
result <- ar(n = 1000, x = 1L:4L, prob = c(0.30, 0.20, 0.35, 0.15))
# Probabilidades aproximadas.
barplot(table(result)/1e4L, ylim = c(0, 0.4))
grid()
ar <- function(n = 1L, x, prob){
c <- max(prob)length(x)
random_y <- function(i){
while (TRUE) {
y <- floor(length(x) * runif(n = 1L, min = 0, max = 1)) + 1L
if (runif(n = 1L, 0, 1) < length(prob) * prob[y] / c) return(y)
}
}
unlist(lapply(X = 1L:n, FUN = random_y))
}
set.seed(1L)
result <- ar(n = 1000, x = 1L:4L, prob = c(0.30, 0.20, 0.35, 0.15))
# Probabilidades aproximadas.
barplot(table(result)/1000, ylim = c(0, 0.4))
grid()
ar <- function(n = 1L, x, prob){
c <- max(prob) * length(x)
random_y <- function(i){
while (TRUE) {
y <- floor(length(x) * runif(n = 1L, min = 0, max = 1)) + 1L
if (runif(n = 1L, 0, 1) < length(prob) * prob[y] / c) return(y)
}
}
unlist(lapply(X = 1L:n, FUN = random_y))
}
set.seed(1L)
result <- ar(n = 1000, x = 1L:4L, prob = c(0.30, 0.20, 0.35, 0.15))
# Probabilidades aproximadas.
barplot(table(result)/1000, ylim = c(0, 0.4))
grid()
1/1.4
ar <- function(n = 1L, x, prob){
c <- max(prob) * length(x)
random_y <- function(i){
while (TRUE) {
y <- floor(length(x) * runif(n = 1L, min = 0, max = 1)) + 1L
if (runif(n = 1L, 0, 1) < length(prob) * prob[y] / c) return(y)
}
}
unlist(lapply(X = 1L:n, FUN = random_y))
}
set.seed(1L)
result <- ar(n = 100000, x = 1L:4L, prob = c(0.30, 0.20, 0.35, 0.15))
# Probabilidades aproximadas.
barplot(table(result)/1000, ylim = c(0, 0.4))
grid()
ar <- function(n = 1L, x, prob){
c <- max(prob) * length(x)
random_y <- function(i){
while (TRUE) {
y <- floor(length(x) * runif(n = 1L, min = 0, max = 1)) + 1L
if (runif(n = 1L, 0, 1) < length(prob) * prob[y] / c) return(y)
}
}
unlist(lapply(X = 1L:n, FUN = random_y))
}
set.seed(1L)
result <- ar(n = 100000, x = 1L:4L, prob = c(0.30, 0.20, 0.35, 0.15))
# Probabilidades aproximadas.
barplot(table(result)/100000, ylim = c(0, 0.4))
grid()
ar <- function(n = 1L, x, prob){
c <- max(prob) * length(x)
random_y <- function(i){
while (TRUE) {
y <- floor(length(x) * runif(n = 1L, min = 0, max = 1)) + 1L
if (runif(n = 1L, 0, 1) < length(prob) * prob[y] / c) return(y)
}
}
unlist(lapply(X = 1L:n, FUN = random_y))
}
set.seed(1L)
result <- ar(n = 100000, x = 1L:4L, prob = c(0.20, 0.20, 0.5, 0.1))
# Probabilidades aproximadas.
barplot(table(result)/100000, ylim = c(0, 0.4))
grid()
ar <- function(n = 1L, x, prob){
c <- max(prob) * length(x)
numero_rej <- 0L
random_y <- function(i){
while (TRUE) {
y <- floor(length(x) * runif(n = 1L, min = 0, max = 1)) + 1L
if (runif(n = 1L, 0, 1) < length(prob) * prob[y] / c){
numero_rej <- numero_rej + 1L
return(y)
}
}
}
list(unlist(lapply(X = 1L:n, FUN = random_y)), numero_rej)
}
set.seed(1L)
result <- ar(n = 100000, x = 1L:4L, prob = c(0.20, 0.20, 0.5, 0.1))
# Probabilidades aproximadas.
barplot(table(result)/100000, ylim = c(0, 0.4))
grid()
ar <- function(n = 1L, x, prob){
c <- max(prob) * length(x)
numero_rej <- 0L
random_y <- function(i){
while (TRUE) {
y <- floor(length(x) * runif(n = 1L, min = 0, max = 1)) + 1L
if (runif(n = 1L, 0, 1) < length(prob) * prob[y] / c) return(y)
else numero_rej <- numero_rej + 1L
}
}
list(unlist(lapply(X = 1L:n, FUN = random_y)), numero_rej)
}
set.seed(1L)
result <- ar(n = 100000, x = 1L:4L, prob = c(0.20, 0.20, 0.5, 0.1))
# Probabilidades aproximadas.
barplot(table(result)/100000, ylim = c(0, 0.4))
grid()
ar <- function(n = 1L, x, prob){
c <- max(prob) * length(x)
numero_rej <- 0L
random_y <- function(i){
while (TRUE) {
y <- floor(length(x) * runif(n = 1L, min = 0, max = 1)) + 1L
if (runif(n = 1L, 0, 1) < length(prob) * prob[y] / c) return(y)
else numero_rej <- numero_rej + 1L
}
}
numero_rej
}
set.seed(1L)
result <- ar(n = 100000, x = 1L:4L, prob = c(0.20, 0.20, 0.5, 0.1))
# Probabilidades aproximadas.
barplot(table(result)/100000, ylim = c(0, 0.4))
grid()
result
4/250
# Amostra original:
x <- rexp(250L, 0.5) # lambda = 1/2
bootstraping <- function(B = 100L, sample_true, stat, ...){
# A função resample() obtem uma amostra com reposição de x:
resample <- function(x){
n <- length(x)
# Selecionando observações uniformemente distribuídas em x.
# Poderia ser utilizado a função sample().
x[floor(n * runif(n = n, min = 0, max = 1) + 1L)]
}
# A função boot() calcula uma statística em uma única amostra
# bootstrap:
boot <- function(x, sample_true){
stat(resample(sample_true), ...)
}
purrr::map_dbl(.x = 1L:B, .f = boot, sample_true = sample_true)
# or
#lapply(X = 1L:N, FUN = boot, sample_true)
}
# Fixando uma semente:
set.seed(1L)
# Observe que stat é a média amostra, uma vez que passamos a função
# mean().
result <- bootstraping(B = 3e3L, sample_true = x, stat = mean)
result
sd(result)
sd(result)^2
sd(result)^2
# Amostra original:
x <- rexp(1e4L, 0.5) # lambda = 1/2
bootstraping <- function(B = 100L, sample_true, stat, ...){
# A função resample() obtem uma amostra com reposição de x:
resample <- function(x){
n <- length(x)
# Selecionando observações uniformemente distribuídas em x.
# Poderia ser utilizado a função sample().
x[floor(n * runif(n = n, min = 0, max = 1) + 1L)]
}
# A função boot() calcula uma statística em uma única amostra
# bootstrap:
boot <- function(x, sample_true){
stat(resample(sample_true), ...)
}
purrr::map_dbl(.x = 1L:B, .f = boot, sample_true = sample_true)
# or
#lapply(X = 1L:N, FUN = boot, sample_true)
}
# Fixando uma semente:
set.seed(1L)
# Observe que stat é a média amostra, uma vez que passamos a função
# mean().
result <- bootstraping(B = 3e3L, sample_true = x, stat = mean)
sd(result)
sd(result)^2
sd(result)
# Amostra original:
x <- rexp(1e4L, 0.5) # lambda = 1/2
bootstraping <- function(B = 100L, sample_true, stat, ...){
# A função resample() obtem uma amostra com reposição de x:
resample <- function(x){
n <- length(x)
# Selecionando observações uniformemente distribuídas em x.
# Poderia ser utilizado a função sample().
x[floor(n * runif(n = n, min = 0, max = 1) + 1L)]
}
# A função boot() calcula uma statística em uma única amostra
# bootstrap:
boot <- function(x, sample_true){
stat(resample(sample_true), ...)
}
purrr::map_dbl(.x = 1L:B, .f = boot, sample_true = sample_true)
# or
#lapply(X = 1L:N, FUN = boot, sample_true)
}
# Fixando uma semente:
set.seed(1L)
# Observe que stat é a média amostra, uma vez que passamos a função
# mean().
result <- bootstraping(B = 250L, sample_true = x, stat = mean)
result
4/1e4
