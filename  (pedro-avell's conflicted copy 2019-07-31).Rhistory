nomes_theta), "gradient")))
quote(do.call(fn,as.list(attr(numericDeriv(expr = quote(eval(fn_exp)),
nomes_theta), "gradient"))))
quote(lambda * do.call(fn,as.list(attr(numericDeriv(expr = quote(eval(fn_exp)),
nomes_theta), "gradient"))))
numericDeriv(quote(lambda * do.call(fn,as.list(attr(numericDeriv(expr = quote(eval(fn_exp)),
nomes_theta), "gradient")))), "lambda")
do.call(fn,as.list(attr(numericDeriv(expr = quote(eval(fn_exp)),
nomes_theta)
)
)
)
quote(do.call(fn,as.list(attr(numericDeriv(expr = quote(eval(fn_exp)),
nomes_theta), "gradient"))))
deriv_lambda <- function(lambda){
quote(do.call(fn,as.list(attr(numericDeriv(expr = quote(eval(fn_exp)),
nomes_theta), "gradient"))))
}
}
numericDeriv(expr = quote(deriv_lambda(lambda)), "lambda")
numericDeriv(expr = quote(eval(deriv_lambda(lambda))), "lambda")
deriv_lambda(lambda)
deriv_lambda(1)
deriv_lambda <- function(lambda){
quote(do.call(fn,as.list(attr(numericDeriv(expr = quote(eval(fn_exp)),
nomes_theta), "gradient"))))
}
deriv_lambda
deriv_lambda(1)
eval(deriv_lambda(1))
deriv_lambda()
deriv_lambda(6)
eval(deriv_lambda(6))
deriv_lambda <- function(lambda){
lambda * quote(do.call(fn,as.list(attr(numericDeriv(expr = quote(eval(fn_exp)),
nomes_theta), "gradient"))))
}
numericDeriv(expr = quote(eval(deriv_lambda(lambda))), "lambda")
numericDeriv(expr = quote(deriv_lambda(lambda)), "lambda")
deriv_lambda <- function(lambda){
lambda * quote(do.call(fn,as.list(attr(numericDeriv(expr = quote(eval(fn_exp)),
nomes_theta), "gradient"))))
}
deriv(lambda)
deriv(1)
deriv_lambda
deriv_lambda(1)
matrix(c(-2,-4, 2,1)
)
matrix(c(-2,-4) 2,1)
matrix(c(-2,-4),2,1)
solve(matrix(c(-2,-4),2,1), c(-1,-1))
solve(matrix(c(-2,-4,0,0),2,2), c(-1,-1))
?optim
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
optim(c(-1.2,1), fr)
optim(c(-1.2,1), fr, hessian = T)
rosenbrock <- function(x1, x2) 100 * (x2 - x1 * x1)^2 + (1 - x1)^2
M  <- plot3D::mesh(seq(-2,  2, length.out = 350),
seq(-2,  2, length.out = 350))
livrary(plot3D)
library(plot3D)
install.packages("plot3D")
rosenbrock <- function(x1, x2) 100 * (x2 - x1 * x1) ^ 2 + (1 - x1) ^ 2
M  <- plot3D::mesh(seq(-2,  2, length.out = 350),
seq(-2,  2, length.out = 350))
M  <- plot3D::mesh(seq(-2,  2, length.out = 350),
seq(-2,  2, length.out = 350))
x <- M$x
y <- M$y
z <- rosenbrock(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2", phi = 47, theta = 0)
z <- rosenbrock(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2", phi = 0, theta = 0)
z <- rosenbrock(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2", phi = 0, theta = 10)
z <- rosenbrock(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2", phi = 0, theta = -40)
z <- rosenbrock(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2", phi = 0, theta = 40)
z <- rosenbrock(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2", phi = 10, theta = 10)
z <- rosenbrock(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2", phi = 10, theta = 50)
z <- rosenbrock(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2", phi = 50, theta = 50)
z <- rosenbrock(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2", phi = 50, theta = 100)
z <- rosenbrock(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2", phi = 50, theta = 150)
rosenbrock <- function(x1, x2) 100 * (x2 - x1 * x1) ^ 2 + (1 - x1) ^ 2
M  <- plot3D::mesh(seq(-10,  10, length.out = 350),
seq(-10,  10, length.out = 350))
x <- M$x
y <- M$y
z <- rosenbrock(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2", phi = 50, theta = 150)
rosenbrock <- function(x1, x2) 100 * (x2 - x1 * x1) ^ 2 + (1 - x1) ^ 2
M  <- plot3D::mesh(seq(-1,  3, length.out = 350),
seq(-2,  2, length.out = 350))
x <- M$x
y <- M$y
z <- rosenbrock(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2", phi = 50, theta = 150)
rosenbrock <- function(x1, x2) 100 * (x2 - x1 * x1) ^ 2 + (1 - x1) ^ 2
M  <- plot3D::mesh(seq(-2,  2, length.out = 350),
seq(-2,  2, length.out = 350))
x <- M$x
y <- M$y
z <- rosenbrock(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2", phi = 50, theta = 150)
?optim
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
grr <- function(x) { ## Gradient of 'fr'
x1 <- x[1]
x2 <- x[2]
c(-400 * x1 * (x2 - x1 * x1) - 2 * (1 - x1),
200 *      (x2 - x1 * x1))
}
optim(c(-1.2,1), fr)
f_objetivo <- function(x) {
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
f_objetivo(c(1,1))
f_objetivo(c(2,4))
f_objetivo(c(-1,-1))
f_objetivo(c(-2,-2))
f_objetivo(c(-2,4))
f(1,1)
f(0,0)
f_objetivo(c(-2,-2))
f_objetivo(c(0,0))
f_objetivo <- function(x, a = 1, b = 100) {
x1 <- x[1]
x2 <- x[2]
(a - x) ^ 2 + b * (y - x ^2)
}
optim(par = c(2, 2), fn = f_objetivo, method = "BFGS")
f_objetivo <- function(x, a = 1, b = 100) {
x <- x[1]
y <- x[2]
(a - x) ^ 2 + b * (y - x ^2)
}
optim(par = c(2, 2), fn = f_objetivo, method = "BFGS")
)
f_objetivo <- function(x, a = 1, b = 100) {
x <- x[1]
y <- x[2]
(a - x) ^ 2 + b * (y - x ^2)
}
optim(par = c(2, 2), fn = f_objetivo, method = "BFGS")
f_objetivo <- function(x, a = 1, b = 100) {
x <- x[1]
y <- x[2]
(a - x) ^ 2 + b * (y - x ^ 2) ^ 2
}
optim(par = c(2, 2), fn = f_objetivo, method = "BFGS")
f_objetivo <- function(x, a = 1, b = 100) {
x1 <- x[1]
x2 <- x[2]
(a - x1) ^ 2 + b * (x2 - x1 ^ 2) ^ 2
}
optim(par = c(2, 2), fn = f_objetivo, method = "BFGS")
f_objetivo <- function(x, a = 2, b = 40) {
x1 <- x[1]
x2 <- x[2]
(a - x1) ^ 2 + b * (x2 - x1 ^ 2) ^ 2
}
optim(par = c(2, 2), fn = f_objetivo, method = "BFGS")
f_objetivo(2, 4)
f_objetivo(2, 4)
f_objetivo(c(2, 4), a = 2, b = 40)
f_objetivo <- function(x, a = 2, b = 40) {
x1 <- x[1]
x2 <- x[2]
(a - x1) ^ 2 + b * (x2 - x1 ^ 2) ^ 2
}
M  <- plot3D::mesh(seq(-2,  2, length.out = 150),
seq(-2,  2, length.out = 150))
x  <- M$x
y <- M$y
z <- f_objetivo(x, y)
fields::image.plot(x, y, z, xlab = "x", ylab = "y")
contour(seq(-2, 2, length.out = nrow(z)),
seq(-2, 2, length.out = nrow(z)), z, add = TRUE)
install.packages("fields")
f_objetivo <- function(x, a = 2, b = 40) {
x1 <- x[1]
x2 <- x[2]
(a - x1) ^ 2 + b * (x2 - x1 ^ 2) ^ 2
}
M  <- plot3D::mesh(seq(-2,  2, length.out = 150),
seq(-2,  2, length.out = 150))
x  <- M$x
y <- M$y
z <- f_objetivo(x, y)
fields::image.plot(x, y, z, xlab = "x", ylab = "y")
contour(seq(-2, 2, length.out = nrow(z)),
seq(-2, 2, length.out = nrow(z)), z, add = TRUE)
points(
x = 1.999998,
y = 3.999992,
col = rgb(1, 1, 1),
pch = 20,
cex = 2.2
)
fields::image.plot(x, y, z, xlab = "x", ylab = "y")
contour(seq(-2, 2, length.out = nrow(z)),
seq(-2, 2, length.out = nrow(z)), z, add = TRUE)
points(
x = 1.999998,
y = 3.999992,
col = rgb(1, 1, 1),
pch = 20,
cex = 2.2
)
set.seed(0L)
dados <- rnorm(n = 350L, mean = 2, sd = 1)
t()
set.seed(0L)
dados <- rnorm(n = 350L, mean = 2, sd = 1)
loglikelihood_normal <- function(par, x){
mu <- par[1]
sigma2 <- par[2]
-sum(log(dnorm(x, mean = mu, sd = sqrt(sigma2))))
}
# maximizando -log-likelihood da amostra aleatória.
optim(par = c(1, 1), fn = loglikelihood_normal, method = "BFGS", x = dados)
set.seed(0L)
dados <- rnorm(n = 750L, mean = 2, sd = 1)
dados
# Função de log-verssimilhança da amostra aleatória.
loglikelihood_normal <- function(par, x){
mu <- par[1]
sigma2 <- par[2]
-sum(log(dnorm(x, mean = mu, sd = sqrt(sigma2))))
}
# maximizando -log-likelihood da amostra aleatória.
optim(par = c(1, 1), fn = loglikelihood_normal, method = "BFGS", x = dados)
# Função de log-verssimilhança da amostra aleatória.
loglikelihood_normal <- function(par, x){
mu <- par[1]
sigma2 <- par[2]
-sum(log(dnorm(x, mean = mu, sd = sqrt(sigma2))))
}
# maximizando -log-likelihood da amostra aleatória.
optim(par = c(1, 1), fn = loglikelihood_normal, method = "BFGS", x = dados)
hist(x = dados, main = "Distribuição normal estimada", ylab = "x", probability = TRUE,
col = rgb(1, 0.9, 0.8), border = NA)
hist(x = dados, main = "Distribuição normal estimada", ylab = "x", probability = TRUE,
col = rgb(1, 0.9, 0.8), border = NA)
plot.new()
plot.window(xlim = c(-5, 5), ylim = c(0, 0.45))
hist(x = dados, main = "Distribuição normal estimada", ylab = "x", probability = TRUE,
col = rgb(1, 0.9, 0.8), border = NA)
plot.new()
plot.window(xlim = c(-5, 5), ylim = c(0, 0.45))
hist(x = dados, main = "Distribuição normal estimada", ylab = "x", probability = TRUE,
col = rgb(1, 0.9, 0.8), border = NA)
resultado <- optim(par = c(1, 1), fn = loglikelihood_normal, method = "BFGS", x = dados)
hist(x = dados, main = "Distribuição normal estimada", ylab = "x", probability = TRUE,
col = rgb(1, 0.9, 0.8), border = NA)
x <- seq(-5, 5, length.out = 1000L)
y <- dnorm(x = dados, mean = resultado$par[1], resultado$par[2])
lines(x, y, lwd = 2)
x <- seq(-5, 5, length.out = 1000L)
y <- dnorm(x = x, mean = resultado$par[1], resultado$par[2])
y
# maximizando -log-likelihood da amostra aleatória.
resultado <- optim(par = c(1, 1), fn = loglikelihood_normal, method = "BFGS", x = dados)
x <- seq(-5, 5, length.out = 1000L)
y <- dnorm(x = x, mean = resultado$par[1], resultado$par[2])
hist(x = dados, main = "Distribuição normal estimada", ylab = "x", probability = TRUE,
col = rgb(1, 0.9, 0.8), border = NA)
lines(x, y, lwd = 2)
resultado <- optim(par = c(1, 1), fn = loglikelihood_normal, method = "BFGS", x = dados)
x <- seq(-5, 5, length.out = 1000L)
y <- dnorm(x = x, mean = resultado$par[1], resultado$par[2])
hist(x = dados, main = "Função Densidade de Probabilidade Estimada", ylab = "Probabilidade", probability = TRUE,
col = rgb(1, 0.9, 0.8), border = NA)
lines(x, y, lwd = 2)
plot.new()
resultado <- optim(par = c(1, 1), fn = loglikelihood_normal, method = "BFGS", x = dados)
x <- seq(-5, 5, length.out = 1000L)
y <- dnorm(x = x, mean = resultado$par[1], resultado$par[2])
hist(x = dados, main = "Função Densidade de Probabilidade Estimada", ylab = "Probabilidade", probability = TRUE,
col = rgb(1, 0.9, 0.8), border = NA)
lines(x, y, lwd = 2)
rm(list=ls(all=TRUE))
cceiling(0.96) + 1
ceiling(0.96)
ceiling(0.96)* 4 + 1
ceiling(0.96) + 1
M  <- plot3D::mesh(seq(-5,  5, length.out = 500),
seq(-5,  5, length.out = 500))
x  <- M$x ; y <- M$y
himmelblaus_plot <- function(x, y){
(x ^ 2 + y - 11) ^ 2 + (x + y ^ 2 - 7) ^ 2
}
pdf(file = "monte_carlo_himmelblaus.pdf", width = 9, height = 9, paper = "special",
family = "Bookman", pointsize = 14)
z <- himmelblaus_plot(x, y)
fields::image.plot(x, y, z, xlab = bquote(x[1]), ylab = bquote(x[2]), main = paste0("N = ", length(par_1)))
contour(seq(-5, 5, length.out = nrow(z)),
seq(-5, 5, length.out = nrow(z)), z, add = TRUE,  nlevels = 30)
points(par_1, par_2, pch = 20, col = rgb(1, 1, 1))
dev.off()
M  <- plot3D::mesh(seq(-5,  5, length.out = 500),
seq(-5,  5, length.out = 500))
x  <- M$x ; y <- M$y
himmelblaus_plot <- function(x, y){
(x ^ 2 + y - 11) ^ 2 + (x + y ^ 2 - 7) ^ 2
}
install.packages("plot3D")
install.packages("fildes")
M  <- plot3D::mesh(seq(-2,  2, length.out = 150),
seq(-2,  2, length.out = 150))
M
# Função Rosenbrock
f_objetivo <- function(x1, x2, a = 2, b = 40) {
(a - x1) ^ 2 + b * (x2 - x1 ^ 2) ^ 2
}
M  <- plot3D::mesh(seq(-2,  2, length.out = 150),
seq(-2,  2, length.out = 150))
x <- M$x
y <- M$y
x
y
# Função Rosenbrock
f_objetivo <- function(x1, x2, a = 2, b = 40) {
(a - x1) ^ 2 + b * (x2 - x1 ^ 2) ^ 2
}
M  <- plot3D::mesh(seq(-2,  2, length.out = 150),
seq(-2,  2, length.out = 150))
x <- M$x
y <- M$y
z <- f_objetivo(x, y)
z
x
y
# Função Rosenbrock
f_objetivo <- function(x1, x2, a = 2, b = 40) {
(a - x1) ^ 2 + b * (x2 - x1 ^ 2) ^ 2
}
M  <- plot3D::mesh(seq(-2,  2, length.out = 150),
seq(-2,  2, length.out = 150))
x <- M$x
y <- M$y
z <- f_objetivo(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2", phi = 47, theta = 0)
# Função Rosenbrock
f_objetivo <- function(x1, x2, a = 2, b = 40) {
(a - x1) ^ 2 + b * (x2 - x1 ^ 2) ^ 2
}
M  <- plot3D::mesh(seq(-2,  2, length.out = 150),
seq(-2,  2, length.out = 150))
x <- M$x
y <- M$y
z <- f_objetivo(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2",
phi = 47, theta = 0)
x <- M$x
y <- M$y
z <- f_objetivo(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2",
phi = 0, theta = 0)
# Função Rosenbrock
f_objetivo <- function(x1, x2, a = 2, b = 40) {
(a - x1) ^ 2 + b * (x2 - x1 ^ 2) ^ 2
}
M  <- plot3D::mesh(seq(-2,  2, length.out = 150),
seq(-2,  2, length.out = 150))
x <- M$x
y <- M$y
z <- f_objetivo(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2",
phi = 0, theta = 50)
# Função Rosenbrock
f_objetivo <- function(x1, x2, a = 2, b = 40) {
(a - x1) ^ 2 + b * (x2 - x1 ^ 2) ^ 2
}
M  <- plot3D::mesh(seq(-2,  2, length.out = 150),
seq(-2,  2, length.out = 150))
x <- M$x
y <- M$y
z <- f_objetivo(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2",
phi = 50, theta = 50)
getwd()
setwd("~/")
# Função Rosenbrock
f_objetivo <- function(x1, x2, a = 2, b = 40) {
(a - x1) ^ 2 + b * (x2 - x1 ^ 2) ^ 2
}
pdf(file = "grafico.pdf", width = 9, height = 9, paper = "special",
family = "Bookman", pointsize = 14)
M  <- plot3D::mesh(seq(-2,  2, length.out = 150),
seq(-2,  2, length.out = 150))
x <- M$x
y <- M$y
z <- f_objetivo(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2",
phi = 50, theta = 50)
dev.off()
pdf(file = "surface_himmelblaus.pdf", width = 9, height = 9, paper = "special",
family = "Bookman", pointsize = 14)
M  <- plot3D::mesh(seq(-5,  5, length.out = 150),
seq(-5,  5, length.out = 150))
x <- M$x
y <- M$y
z <- himmelblaus_plot(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2", phi = 65, theta = -60)
dev.off()
# Função Rosenbrock
f_objetivo <- function(x1, x2, a = 2, b = 40) {
(a - x1) ^ 2 + b * (x2 - x1 ^ 2) ^ 2
}
pdf(file = "grafico.pdf", width = 9, height = 9, paper = "special",
family = "Bookman", pointsize = 14)
M  <- plot3D::mesh(seq(-2,  2, length.out = 550),
seq(-2,  2, length.out = 550))
x <- M$x
y <- M$y
z <- f_objetivo(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2",
phi = 50, theta = 50)
dev.off()
# Função Rosenbrock
f_objetivo <- function(x, a = 2, b = 40) {
x1 <- x[1]
x2 <- x[2]
(a - x1) ^ 2 + b * (x2 - x1 ^ 2) ^ 2
}
optim(par = c(2, 2), fn = f_objetivo, method = "BFGS")
# Função Rosenbrock
f_objetivo <- function(x, a = 2, b = 40) {
x1 <- x[1]
x2 <- x[2]
(a - x1) ^ 2 + b * (x2 - x1 ^ 2) ^ 2
}
optim(par = c(2, 2), fn = f_objetivo, method = "BFGS", a =1, b = 6)
# Função Rosenbrock
f_objetivo <- function(x, y, a = 2, b = 40) {
-1*abs(sin(x) * cos(y) * exp(abs(1 - sqrt(x^2 + y^2)/pi)))
}
M  <- plot3D::mesh(seq(-10,  10, length.out = 550),
seq(-10,  10, length.out = 550))
x <- M$x
y <- M$y
z <- f_objetivo(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2",
phi = 50, theta = 50)
pdf(file = "grafico.pdf", width = 9, height = 9, paper = "special",
family = "Bookman", pointsize = 14)
M  <- plot3D::mesh(seq(-10,  10, length.out = 550),
seq(-10,  10, length.out = 550))
x <- M$x
y <- M$y
z <- f_objetivo(x, y)
plot3D::surf3D(x, y, z, inttype = 1, bty = "b2",
phi = 50, theta = 50)
dev.off()
M  <- plot3D::mesh(seq(-10,  10, length.out = 550),
seq(-10,  10, length.out = 550))
x <- M$x
y <- M$y
z <- f_objetivo(x, y)
fields::image.plot(x, y, z)
install.packages("fields")
M  <- plot3D::mesh(seq(-10,  10, length.out = 550),
seq(-10,  10, length.out = 550))
x <- M$x
y <- M$y
z <- f_objetivo(x, y)
fields::image.plot(x, y, z)
points(x = 0 , y = 0, pch = 19 , col = rgb(1,1,1))
pdf(file = "grafico.pdf", width = 9, height = 9, paper = "special",
family = "Bookman", pointsize = 14)
M  <- plot3D::mesh(seq(-10,  10, length.out = 550),
seq(-10,  10, length.out = 550))
x <- M$x
y <- M$y
z <- f_objetivo(x, y)
fields::image.plot(x, y, z)
contour(seq(-10, 10, length.out = nrow(z)),
seq(-10, 10, length.out = nrow(z)),
z, add = TRUE,  nlevels = 30)
points(x = 0 , y = 0, pch = 19 , col = rgb(1,1,1))
dev.off()
pdf(file = "grafico.pdf", width = 9, height = 9, paper = "special",
family = "Bookman", pointsize = 14)
M  <- plot3D::mesh(seq(-10,  10, length.out = 550),
seq(-10,  10, length.out = 550))
x <- M$x
y <- M$y
z <- f_objetivo(x, y)
fields::image.plot(x, y, z)
#contour(seq(-10, 10, length.out = nrow(z)),
#        seq(-10, 10, length.out = nrow(z)),
#        z, add = TRUE,  nlevels = 30)
points(x = 0 , y = 0, pch = 19 , col = rgb(1,1,1))
dev.off()
